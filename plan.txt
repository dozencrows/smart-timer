Smart Kitchen Timer Plan
========================

To Do
-----
Software:
* Replace error strings with numeric codes (memory saving)
* Fix 'first second' inaccuracy
* Try larger characters
* Try custom characters

Hardware:
* Switch to 3v3 LCD display and remove level shift
* Try push/pull piezo driver
* Try battery power supply options:
  * Other battery sizes
* Try 2 channel level conversion breakout
* Custom PCB
* Case and button covers

WIP
---
* Investigate intermittent I2C errors (may be hardware)
  * No definite cause, but may be related to having serial cable connection with ground to PC.

Done
----
* Leave backlight on for 2 seconds on boot
* Switch MCP23017 with MCP23008
* Tested with 4 x AA and 5V regulator
* Try interrupt driven button polling: GPIO extender side
* Try interrupt driven button polling: LPC side
  * Rejig main loop to be WFI based
  * Enable & disable buzzer interrupt as needed
  * Improve button responsiveness
* Try 'unity' build to see any effect on size
  * Actually made it slightly bigger
* Removed printf to save memory
* Refactor main module button handling to better encapsulate GPIO expanded & interrupt handling
* Eliminate divide calls
* Try piezo sounder with built-in oscillator to simplify code & see if power reduces
  * Didn't observe power difference.
  * Was able to cut down buzzer interrupt rate
* Investigate reducing power consumption further
  * Initial interrupt driven approach means already using sleep mode
  * Deep sleep mode when timers idle -> 6x reduction in power for LPC 
* Try other piezo sounders to get better volume
* Fix initial beep at start with continuous tone buzzer
  * Add pull-down R to transistor base
* Add temp resistor to control continuous tone buzzer volume for dev purposes
* Use pin 8 (PIO0_0) to drive switch controlling LCD on & off for power saving
  * Initially via P-channel MOSFET IRLIB9343 (5V in to source, LCD power in to drain) - worked
  * Replaced MOSFET with MIC2545A smart switch: worked, smaller part (but added 2 caps & 1R)
* Tried turning off I2C level shifter alongside LCD to reduce idle current draw
  * No joy here - turning off 5V side using smart switch made no difference, pulling I2C pin levels
    to low during sleep actually increased idle draw by ~1.2mA.
* Fix too early return to sleep if button not pressed for long enough

